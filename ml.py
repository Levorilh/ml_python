from linear import *from mlp import *init_random()import numpy as npimport osfrom PIL import Imageimport matplotlib.pyplot as pltIMG_SIZE = (8, 8)PATH = os.path.join("data_large/")TRAIN = os.path.join(PATH, "train")classes = os.listdir(TRAIN)def import_images_and_assign_labels(folder, label, X, Y):    for file in os.listdir(folder):        image_path = os.path.join(folder, file)        im = Image.open(image_path)        im = im.resize(IMG_SIZE)        im = im.convert("RGB")        im_arr = np.array(im)        im_arr = np.reshape(im_arr, (IMG_SIZE[0] * IMG_SIZE[1] * 3,))        X.append(im_arr)        Y.append(label)def import_dataset():    X_train, y_train, X_valid, y_valid = [], [], [], []    labels = np.identity(len(os.listdir(TRAIN)))    for set_type in ["train", "valid"]:        for cl, lab in zip(classes, labels):            if set_type == "train":                X_set, y_set = X_train, y_train            else:                X_set, y_set = X_valid, y_valid            import_images_and_assign_labels(                os.path.join(PATH, set_type, cl),                lab,                X_set,                y_set            )    return (np.array(X_train) / 255.0, np.array(y_train)), \           (np.array(X_valid) / 255.0, np.array(y_valid))def accuracy(model):    true_preds = 0    total_preds = len(X_train)    for x, y in zip(X_train, y_train):        if np.argmax(predict_mlp_model_classification(model, x, input_dim[-1])) == np.argmax(y):            true_preds += 1    print(f"Accuracy training: {round((true_preds / total_preds) * 100, 2)}%")    true_preds = 0    total_preds = len(X_valid)    for x, y in zip(X_valid, y_valid):        if np.argmax(predict_mlp_model_classification(model, x, input_dim[-1])) == np.argmax(y):            true_preds += 1    print(f"Accuracy valid: {round((true_preds / total_preds) * 100, 2)}%")(X_train, y_train), (X_valid, y_valid) = import_dataset()picture_test = np.random.randint(0, len(X_valid) - 1)input_dim = [len(X_train[0]), 128, 8]p_model2 = load_mlp_model("mlp_10000_768_128.txt")test_after = predict_mlp_model_classification(p_model2, X_valid[picture_test], input_dim[-1])print("After training:", test_after)print("Class index : ", np.argmax(test_after))print("Class expected :", np.argmax(y_train[picture_test]))accuracy(p_model2)destroy_mlp_model(p_model2)